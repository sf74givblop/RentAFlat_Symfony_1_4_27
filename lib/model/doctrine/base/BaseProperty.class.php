<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Property', 'doctrine');

/**
 * BaseProperty
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $reference_no
 * @property string $title
 * @property string $text
 * @property integer $disposition_id
 * @property float $area
 * @property integer $floor
 * @property boolean $lift
 * @property float $cellar
 * @property float $balcony
 * @property integer $location_id
 * @property integer $price
 * @property timestamp $created_on
 * @property string $street
 * @property integer $property_build_id
 * @property float $terace
 * @property float $loggia
 * @property float $garden
 * @property float $garage
 * @property boolean $parking_place
 * @property Disposition $Disposition
 * @property Location $Location
 * @property PropertyBuild $PropertyBuild
 * 
 * @method integer       getId()                Returns the current record's "id" value
 * @method string        getReferenceNo()       Returns the current record's "reference_no" value
 * @method string        getTitle()             Returns the current record's "title" value
 * @method string        getText()              Returns the current record's "text" value
 * @method integer       getDispositionId()     Returns the current record's "disposition_id" value
 * @method float         getArea()              Returns the current record's "area" value
 * @method integer       getFloor()             Returns the current record's "floor" value
 * @method boolean       getLift()              Returns the current record's "lift" value
 * @method float         getCellar()            Returns the current record's "cellar" value
 * @method float         getBalcony()           Returns the current record's "balcony" value
 * @method integer       getLocationId()        Returns the current record's "location_id" value
 * @method integer       getPrice()             Returns the current record's "price" value
 * @method timestamp     getCreatedOn()         Returns the current record's "created_on" value
 * @method string        getStreet()            Returns the current record's "street" value
 * @method integer       getPropertyBuildId()   Returns the current record's "property_build_id" value
 * @method float         getTerace()            Returns the current record's "terace" value
 * @method float         getLoggia()            Returns the current record's "loggia" value
 * @method float         getGarden()            Returns the current record's "garden" value
 * @method float         getGarage()            Returns the current record's "garage" value
 * @method boolean       getParkingPlace()      Returns the current record's "parking_place" value
 * @method Disposition   getDisposition()       Returns the current record's "Disposition" value
 * @method Location      getLocation()          Returns the current record's "Location" value
 * @method PropertyBuild getPropertyBuild()     Returns the current record's "PropertyBuild" value
 * @method Property      setId()                Sets the current record's "id" value
 * @method Property      setReferenceNo()       Sets the current record's "reference_no" value
 * @method Property      setTitle()             Sets the current record's "title" value
 * @method Property      setText()              Sets the current record's "text" value
 * @method Property      setDispositionId()     Sets the current record's "disposition_id" value
 * @method Property      setArea()              Sets the current record's "area" value
 * @method Property      setFloor()             Sets the current record's "floor" value
 * @method Property      setLift()              Sets the current record's "lift" value
 * @method Property      setCellar()            Sets the current record's "cellar" value
 * @method Property      setBalcony()           Sets the current record's "balcony" value
 * @method Property      setLocationId()        Sets the current record's "location_id" value
 * @method Property      setPrice()             Sets the current record's "price" value
 * @method Property      setCreatedOn()         Sets the current record's "created_on" value
 * @method Property      setStreet()            Sets the current record's "street" value
 * @method Property      setPropertyBuildId()   Sets the current record's "property_build_id" value
 * @method Property      setTerace()            Sets the current record's "terace" value
 * @method Property      setLoggia()            Sets the current record's "loggia" value
 * @method Property      setGarden()            Sets the current record's "garden" value
 * @method Property      setGarage()            Sets the current record's "garage" value
 * @method Property      setParkingPlace()      Sets the current record's "parking_place" value
 * @method Property      setDisposition()       Sets the current record's "Disposition" value
 * @method Property      setLocation()          Sets the current record's "Location" value
 * @method Property      setPropertyBuild()     Sets the current record's "PropertyBuild" value
 * 
 * @package    RentAFlat
 * @subpackage model
 * @author     Serge FrÃ©zier  with NetBeans IDE 8.2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProperty extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('property');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('reference_no', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('disposition_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('area', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('floor', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lift', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('cellar', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('balcony', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('location_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('price', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_on', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('street', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('property_build_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('terace', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('loggia', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('garden', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('garage', 'float', 10, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('parking_place', 'boolean', null, array(
             'type' => 'boolean',
             'primary' => false,
             'default' => false,
             'notnull' => true,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Disposition', array(
             'local' => 'disposition_id',
             'foreign' => 'id'));

        $this->hasOne('Location', array(
             'local' => 'location_id',
             'foreign' => 'id'));

        $this->hasOne('PropertyBuild', array(
             'local' => 'property_build_id',
             'foreign' => 'id'));
    }
}